// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  BIDDER
  SELLER
}

model User {
  userId     String   @id @default(uuid()) @map("user_id") @db.Char(36)
  email      String   @unique @db.VarChar(255)
  username   String   @unique @db.VarChar(255)
  password   String   @db.VarChar(255)
  role       Role
  isBanned   Boolean  @default(false) @map("is_banned")
  isVerified Boolean  @default(false) @map("is_verified")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  refreshToken RefreshToken[] @relation("User_Has_Tokens")

  profile Profile? @relation("User_Has_Profile")

  otps Otp[] @relation("User_Has_Otps")

  addresses Address[] @relation("User_Has_Addresses")

  followings Follow[] @relation("Users_Follow_Sellers")
  followers  Follow[] @relation("Sellers_FollowedBy_Users")

  @@map("users")
}

model RefreshToken {
  id    String @id @default(uuid()) @db.Char(36)
  token String @unique @db.VarChar(512)

  userId String @map("user_id")
  user   User   @relation("User_Has_Tokens", fields: [userId], references: [userId], onDelete: Cascade)

  ip         String?  @db.VarChar(45)
  userAgent  String?  @db.Text
  provider   String?  @default("local") @db.VarChar(50)
  isRevoked  Boolean  @default(false) @map("is_revoked")
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  lastUsedAt DateTime @default(now()) @map("last_used_at") @db.Timestamp(0)

  @@unique([userId, provider], name: "userId_provider")
  @@index([userId])
  @@map("refresh_tokens")
}

model Profile {
  userId String @id @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Profile", fields: [userId], references: [userId], onDelete: Cascade)

  fullName        String?   @map("full_name") @db.VarChar(255)
  phoneNumber     String?   @map("phone_number") @db.VarChar(255)
  profileImageUrl String?   @map("profile_image_url") @db.VarChar(255)
  createdAt       DateTime? @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt       DateTime? @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("profiles")
}

enum OtpType {
  VERIFY_EMAIL
  RESET_PASSWORD
}

model Otp {
  id   String  @id @default(uuid()) @db.Char(36)
  code String? @db.Char(6)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Otps", fields: [userId], references: [userId], onDelete: Cascade)

  type      OtpType
  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime  @updatedAt @map("updated_at") @db.Timestamp(0)
  expiresAt DateTime? @map("expires_at") @db.Timestamp(0)

  @@index([userId])
  @@map("otps")
}

enum AddressType {
  Home
  Work
  Others
}

model Address {
  addressId String @id @default(uuid()) @map("address_id") @db.Char(36)

  userId String @map("user_id") @db.Char(36)
  user   User   @relation("User_Has_Addresses", fields: [userId], references: [userId], onDelete: Cascade)

  streetAddress String      @map("street_address") @db.VarChar(255)
  city          String      @db.VarChar(255)
  state         String?     @db.VarChar(255)
  postalCode    String?     @map("postal_code") @db.VarChar(255)
  country       String      @db.VarChar(255)
  addressType   AddressType @map("address_type")
  createdAt     DateTime    @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt     DateTime    @updatedAt @map("updated_at") @db.Timestamp(0)

  @@map("addresses")
}

enum FollowStatus {
  PENDING
  ACTIVE
  BLOCKED
  UNFOLLOWED
  DECLINED
}

model Follow {
  followId String @id @default(uuid()) @map("follow_id") @db.Char(36)

  followerId String @map("follower_id") @db.Char(36)
  follower   User   @relation("Users_Follow_Sellers", fields: [followerId], references: [userId], onDelete: Cascade)

  sellerId String @map("seller_id") @db.Char(36)
  seller   User   @relation("Sellers_FollowedBy_Users", fields: [sellerId], references: [userId], onDelete: Cascade)

  status FollowStatus @default(PENDING)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamp(0)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamp(0)

  @@unique([followerId, sellerId])
  @@map("follows")
}
